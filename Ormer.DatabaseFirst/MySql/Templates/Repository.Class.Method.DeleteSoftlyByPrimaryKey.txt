/// <summary>
/// Mark specific records as deleted by primary key <t:repository.primaryKey.name>/<t:repository.primaryKey.name> collection
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.name> array collection</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int DeleteSoftlyBy<t:repository.primaryKey.Name>(params <t:repository.primaryKey.type>[] <t:repository.primaryKey.names>)
{
	using (var conn = GetWritableConnection())
	{
		var sql = $@"DELETE FROM <t:repository.table> WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>";
		var dps = new DynamicParameters();
		dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
		return this.ExecuteScalar(sql, dps);
	}
}

/// <summary>
///  Delete specific records by primary key <t:repository.primaryKey.name>/<t:repository.primaryKey.name> collection, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.name> array collection</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> DeleteSoftlyBy<t:repository.primaryKey.Name>Async(params <t:repository.primaryKey.type>[] <t:repository.primaryKey.names>)
{
	using (var conn = GetWritableConnection())
	{
		var sql = $@"DELETE FROM <t:repository.table> WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>";
		var dps = new DynamicParameters();
		dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
		return this.ExecuteScalarAsync(sql, dps);
	}
}

