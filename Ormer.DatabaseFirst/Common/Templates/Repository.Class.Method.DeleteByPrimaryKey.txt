/// <summary>
/// Delete specific records by primary key <t:repository.primaryKey.nameOriginal>/<t:repository.primaryKey.nameOriginal> collection
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.nameOriginal> array collection</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int DeleteBy<t:repository.primaryKey.Name>(params <t:repository.primaryKey.type>[] <t:repository.primaryKey.names>)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"DELETE FROM <t:repository.table> WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
        return this.Execute(sql, dps);
    }
}

/// <summary>
///  Delete specific records by primary key <t:repository.primaryKey.nameOriginal>/<t:repository.primaryKey.nameOriginal> collection, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.nameOriginal> array collection</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> DeleteBy<t:repository.primaryKey.Name>Async(params <t:repository.primaryKey.type>[] <t:repository.primaryKey.names>)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"DELETE FROM <t:repository.table> WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
        return this.ExecuteAsync(sql, dps);
    }
}

