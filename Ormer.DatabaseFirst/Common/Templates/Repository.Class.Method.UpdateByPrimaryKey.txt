/// <summary>
/// Update specific single column by primary key <t:repository.primaryKey.nameOriginal>
/// </summary>
/// <param name="<t:repository.primaryKey.name>">Target record <t:repository.primaryKey.nameOriginal></param>
/// <param name="columnName">The column to update</param>
/// <param name="columnValue">The value</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int UpdateBy<t:repository.primaryKey.Name>(<t:repository.primaryKey.type> <t:repository.primaryKey.name>, string columnName, object columnValue)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnName} = @{columnName} WHERE <t:repository.primaryKey.nameOriginal> = @<t:repository.primaryKey.nameOriginal>
";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginal>", <t:repository.primaryKey.nameOriginal>);
        dps.Add(columnName, columnValue);
        return this.Execute(sql, dps);
    }
}

/// <summary>
/// Update specific single column by primary key <t:repository.primaryKey.nameOriginal> collection
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.names> collection</param>
/// <param name="columnName">The column to update</param>
/// <param name="columnValue">The value</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int UpdateBy<t:repository.primaryKey.Name>(IEnumerable<<t:repository.primaryKey.type>> <t:repository.primaryKey.names>, string columnName, object columnValue)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet> {columnName} = @{columnName} WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>
";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
        dps.Add(columnName, columnValue);
        return this.Execute(sql, dps);
    }
}

/// <summary>
/// Update specific single column by primary key <t:repository.primaryKey.nameOriginal>, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.name>">Target record <t:repository.primaryKey.nameOriginal></param>
/// <param name="columnName">The column to update</param>
/// <param name="columnValue">The value</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> UpdateBy<t:repository.primaryKey.Name>Async(<t:repository.primaryKey.type> <t:repository.primaryKey.name>, string columnName, object columnValue)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnName} = @{columnName} WHERE <t:repository.primaryKey.nameOriginal> = @<t:repository.primaryKey.nameOriginal>
";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginal>", <t:repository.primaryKey.name>);
        dps.Add(columnName, columnValue);
        return this.ExecuteAsync(sql, dps);
    }
}

/// <summary>
/// Update specific single column by primary key <t:repository.primaryKey.nameOriginal> collection, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.nameOriginal> collection</param>
/// <param name="columnName">The column to update</param>
/// <param name="columnValue">The value</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> UpdateBy<t:repository.primaryKey.Name>Async(IEnumerable<<t:repository.primaryKey.type>> <t:repository.primaryKey.names>, string columnName, object columnValue)
{
    using (var conn = GetWritableConnection())
    {
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnName} = @{columnName} WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>
";
        var dps = new DynamicParameters();
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);
        dps.Add(columnName, columnValue);
        return this.ExecuteAsync(sql, dps);
    }
}

/// <summary>
/// Update specific multiple columns by primary key <t:repository.primaryKey.nameOriginal>
/// </summary>
/// <param name="<t:repository.primaryKey.name>">Target record <t:repository.primaryKey.nameOriginal></param>
/// <param name="kvs">Column-Parameter key-value pairs, key is the column name and value is the value</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int UpdateBy<t:repository.primaryKey.Name>(<t:repository.primaryKey.type> <t:repository.primaryKey.name>, params KeyValuePair<string, object> kvs)
{
    using (var conn = GetWritableConnection())
    {
        var columnSets = string.Join(", ", kvs.Select(m => $@"{m.Key} = @{m.Key}"));
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnSets} WHERE <t:repository.primaryKey.nameOriginal> = @<t:repository.primaryKey.nameOriginal>
";
        var dps = new DynamicParameters(kvs);
        dps.Add("<t:repository.primaryKey.nameOriginal>", <t:repository.primaryKey.name>);

        return this.Execute(sql, dps);
    }
}

/// <summary>
/// Update specific multiple columns by primary key <t:repository.primaryKey.nameOriginal> collection
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.nameOriginal> collection</param>
/// <param name="kvs">Column-Parameter key-value pairs, key is the column name and value is the value</param>
/// <returns>
/// The count of records that effected
/// </returns>
public int UpdateBy<t:repository.primaryKey.Name>(IEnumerable<<t:repository.primaryKey.type>> <t:repository.primaryKey.names>, params KeyValuePair<string, object> kvs)
{
    using (var conn = GetWritableConnection())
    {
        var columnSets = string.Join(", ", kvs.Select(m => $@"{m.Key} = @{m.Key}"));
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnSets} WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>
";
        var dps = new DynamicParameters(kvs);
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);

        return this.Execute(sql, dps);
    }
}

/// <summary>
/// Update specific multiple columns by primary key <t:repository.primaryKey.nameOriginal>, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.name>">Target record <t:repository.primaryKey.nameOriginal></param>
/// <param name="kvs">Column-Parameter key-value pairs, key is the column name and value is the value</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> UpdateBy<t:repository.primaryKey.Name>Async(<t:repository.primaryKey.type> <t:repository.primaryKey.name>, params KeyValuePair<string, object> kvs)
{
    using (var conn = GetWritableConnection())
    {
        var columnSets = string.Join(", ", kvs.Select(m => $@"{m.Key} = @{m.Key}"));
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnSets} WHERE <t:repository.primaryKey.nameOriginal> = @<t:repository.primaryKey.nameOriginal>
";
        var dps = new DynamicParameters(kvs);
        dps.Add("<t:repository.primaryKey.nameOriginal>", <t:repository.primaryKey.name>);

        return this.ExecuteAsync(sql, dps);
    }
}

/// <summary>
/// Update specific multiple columns by primary key <t:repository.primaryKey.nameOriginal> collection, asynchronously
/// </summary>
/// <param name="<t:repository.primaryKey.names>">Target records <t:repository.primaryKey.nameOriginal> collection</param>
/// <param name="kvs">Column-Parameter key-value pairs, key is the column name and value is the value</param>
/// <returns>
/// The count of records that effected, asynchronous
/// </returns>
public Task<int> UpdateBy<t:repository.primaryKey.Name>Async(IEnumerable<<t:repository.primaryKey.type>> <t:repository.primaryKey.names>, params KeyValuePair<string, object> kvs)
{
    using (var conn = GetWritableConnection())
    {
        var columnSets = string.Join(", ", kvs.Select(m => $@"{m.Key} = @{m.Key}"));
        var sql = $@"
UPDATE <t:repository.table> SET <t:repository.column.updateTimeSet>{columnSets} WHERE <t:repository.primaryKey.nameOriginal> IN @<t:repository.primaryKey.nameOriginals>
";
        var dps = new DynamicParameters(kvs);
        dps.Add("<t:repository.primaryKey.nameOriginals>", <t:repository.primaryKey.names>);

        return this.ExecuteAsync(sql, dps);
    }
}